// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package Api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostApp_UploadPost_FullMethodName  = "/PostApp/UploadPost"
	PostApp_SignIn_FullMethodName      = "/PostApp/SignIn"
	PostApp_SignUp_FullMethodName      = "/PostApp/SignUp"
	PostApp_LikePost_FullMethodName    = "/PostApp/LikePost"
	PostApp_DislikePost_FullMethodName = "/PostApp/DislikePost"
	PostApp_CommentPost_FullMethodName = "/PostApp/CommentPost"
)

// PostAppClient is the client API for PostApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostAppClient interface {
	UploadPost(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadPostReq, UploadPostRes], error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error)
	SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error)
	LikePost(ctx context.Context, in *LikePostReq, opts ...grpc.CallOption) (*LikePostRes, error)
	DislikePost(ctx context.Context, in *DislikePostReq, opts ...grpc.CallOption) (*DislikePostRes, error)
	CommentPost(ctx context.Context, in *CommentPostReq, opts ...grpc.CallOption) (*CommentPostRes, error)
}

type postAppClient struct {
	cc grpc.ClientConnInterface
}

func NewPostAppClient(cc grpc.ClientConnInterface) PostAppClient {
	return &postAppClient{cc}
}

func (c *postAppClient) UploadPost(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadPostReq, UploadPostRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PostApp_ServiceDesc.Streams[0], PostApp_UploadPost_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadPostReq, UploadPostRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PostApp_UploadPostClient = grpc.ClientStreamingClient[UploadPostReq, UploadPostRes]

func (c *postAppClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInRes)
	err := c.cc.Invoke(ctx, PostApp_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAppClient) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpRes)
	err := c.cc.Invoke(ctx, PostApp_SignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAppClient) LikePost(ctx context.Context, in *LikePostReq, opts ...grpc.CallOption) (*LikePostRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikePostRes)
	err := c.cc.Invoke(ctx, PostApp_LikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAppClient) DislikePost(ctx context.Context, in *DislikePostReq, opts ...grpc.CallOption) (*DislikePostRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DislikePostRes)
	err := c.cc.Invoke(ctx, PostApp_DislikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAppClient) CommentPost(ctx context.Context, in *CommentPostReq, opts ...grpc.CallOption) (*CommentPostRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentPostRes)
	err := c.cc.Invoke(ctx, PostApp_CommentPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostAppServer is the server API for PostApp service.
// All implementations must embed UnimplementedPostAppServer
// for forward compatibility.
type PostAppServer interface {
	UploadPost(grpc.ClientStreamingServer[UploadPostReq, UploadPostRes]) error
	SignIn(context.Context, *SignInReq) (*SignInRes, error)
	SignUp(context.Context, *SignUpReq) (*SignUpRes, error)
	LikePost(context.Context, *LikePostReq) (*LikePostRes, error)
	DislikePost(context.Context, *DislikePostReq) (*DislikePostRes, error)
	CommentPost(context.Context, *CommentPostReq) (*CommentPostRes, error)
	mustEmbedUnimplementedPostAppServer()
}

// UnimplementedPostAppServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostAppServer struct{}

func (UnimplementedPostAppServer) UploadPost(grpc.ClientStreamingServer[UploadPostReq, UploadPostRes]) error {
	return status.Errorf(codes.Unimplemented, "method UploadPost not implemented")
}
func (UnimplementedPostAppServer) SignIn(context.Context, *SignInReq) (*SignInRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedPostAppServer) SignUp(context.Context, *SignUpReq) (*SignUpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedPostAppServer) LikePost(context.Context, *LikePostReq) (*LikePostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedPostAppServer) DislikePost(context.Context, *DislikePostReq) (*DislikePostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikePost not implemented")
}
func (UnimplementedPostAppServer) CommentPost(context.Context, *CommentPostReq) (*CommentPostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPost not implemented")
}
func (UnimplementedPostAppServer) mustEmbedUnimplementedPostAppServer() {}
func (UnimplementedPostAppServer) testEmbeddedByValue()                 {}

// UnsafePostAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostAppServer will
// result in compilation errors.
type UnsafePostAppServer interface {
	mustEmbedUnimplementedPostAppServer()
}

func RegisterPostAppServer(s grpc.ServiceRegistrar, srv PostAppServer) {
	// If the following call pancis, it indicates UnimplementedPostAppServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostApp_ServiceDesc, srv)
}

func _PostApp_UploadPost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PostAppServer).UploadPost(&grpc.GenericServerStream[UploadPostReq, UploadPostRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PostApp_UploadPostServer = grpc.ClientStreamingServer[UploadPostReq, UploadPostRes]

func _PostApp_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAppServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostApp_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAppServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostApp_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAppServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostApp_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAppServer).SignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostApp_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAppServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostApp_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAppServer).LikePost(ctx, req.(*LikePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostApp_DislikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAppServer).DislikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostApp_DislikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAppServer).DislikePost(ctx, req.(*DislikePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostApp_CommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAppServer).CommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostApp_CommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAppServer).CommentPost(ctx, req.(*CommentPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PostApp_ServiceDesc is the grpc.ServiceDesc for PostApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PostApp",
	HandlerType: (*PostAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _PostApp_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _PostApp_SignUp_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _PostApp_LikePost_Handler,
		},
		{
			MethodName: "DislikePost",
			Handler:    _PostApp_DislikePost_Handler,
		},
		{
			MethodName: "CommentPost",
			Handler:    _PostApp_CommentPost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPost",
			Handler:       _PostApp_UploadPost_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
